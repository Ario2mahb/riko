"""Compile/Translate Yahoo Pipe into Python

   (initial proof of concept)

   Takes a JSON representation of a Yahoo pipe and either:
   
     a) translates it into a Python script containing a function (using generators to build the pipeline)
     or
     b) compile it as a pipeline of generators which can be executed in-process
     
   Usage:
     a) python compile.py -f pipe1.json > pipe1.py
        python pipe1.py
        
     b) import compile
        p = compile.parse_and_build_pipe("JSON pipe representation")
        for i in p:
            print i
            
   Instead of passing a filename (-f) a pipe id can be passed (-p) to fetch the JSON from Yahoo.
     
   Author: Greg Gaughan
   Idea: Tony Hirst (http://ouseful.wordpress.com/2010/02/25/starting-to-think-about-a-yahoo-pipes-code-generator)
   Python generator pipelines inspired by: David Beazely (http://www.dabeaz.com/generators-uk)
"""

from optparse import OptionParser
import fileinput
import urllib

from pipe2py import util

try:
    import json
except ImportError:
    import simplejson as json
   
from topsort import topological_sort

#needed for build_pipe - ensure modules/__init__.py.__all__ lists all available modules
from pipe2py.modules import *


def _parse_pipe(json_pipe, pipe_name="anonymous"):
    """Parse pipe JSON into internal structures
    
    Keyword arguments:
    json_pipe -- JSON representation of the pipe
    pipe_name -- a name for the pipe (used for linking pipes)
    
    Returns:
    pipe -- an internal representation of a pipe
    """   
    pipe = {'name': util.pythonise(pipe_name)}
    
    pipe['modules'] = {}
    pipe['graph'] = {}
    pipe['wires'] = {}
    for module in json_pipe['modules']:
        pipe['modules'][util.pythonise(module['id'])] = module
        pipe['graph'][util.pythonise(module['id'])] = []

    for wire in json_pipe['wires']:
        pipe['graph'][util.pythonise(wire['src']['moduleid'])].append(util.pythonise(wire['tgt']['moduleid']))

    for wire in json_pipe['wires']:
        pipe['wires'][util.pythonise(wire['id'])] = wire
            
    return pipe

def build_pipe(pipe):
    """Convert a pipe into an executable Python pipeline
    """
    module_sequence = topological_sort(pipe['graph'])
    
    steps = {}
    for module_id in module_sequence:
        module = pipe['modules'][module_id]
        
        #Plumb I/O
        input_module = None
        for wire in pipe['wires']:
            if util.pythonise(pipe['wires'][wire]['tgt']['moduleid']) == module_id and pipe['wires'][wire]['tgt']['id'] == '_INPUT' and pipe['wires'][wire]['src']['id'] == '_OUTPUT':
                input_module = steps[util.pythonise(pipe['wires'][wire]['src']['moduleid'])]
        
        pargs = {"conf":module['conf']}
            
        for wire in pipe['wires']:
            if util.pythonise(pipe['wires'][wire]['tgt']['moduleid']) == module_id and pipe['wires'][wire]['tgt']['id'] != '_INPUT' and pipe['wires'][wire]['src']['id'] == '_OUTPUT':
                pargs["%(id)s" % {'id':util.pythonise(pipe['wires'][wire]['tgt']['id'])}] = "%(secondary_module)s" % {'secondary_module':steps[util.pythonise(pipe['wires'][wire]['src']['moduleid'])]}
                
        module_ref = eval("pipe" + module['type'] + ".pipe_" + module['type'])
        steps[module_id] = module_ref(input_module, **pargs)

    return steps[module_id]
    
    
def write_pipe(pipe):
    """Convert a pipe into Python script
    """
    
    pypipe = ("""#Pipe generated by pipe2py\n"""
              """\n"""
              """from pipe2py.modules import *\n"""
              """\n"""
              """def pipe_%s():\n"""
              """    #demo\n"""
              """\n""" % (pipe['name'])
             )

    module_sequence = topological_sort(pipe['graph'])
       
    for module_id in module_sequence:
        module = pipe['modules'][module_id]

        #Plumb I/O
        input_module = None
        for wire in pipe['wires']:
            if util.pythonise(pipe['wires'][wire]['tgt']['moduleid']) == module_id and pipe['wires'][wire]['tgt']['id'] == '_INPUT' and pipe['wires'][wire]['src']['id'] == '_OUTPUT':
                input_module = util.pythonise(pipe['wires'][wire]['src']['moduleid'])
        
        pargs = ["%(input_module)s" % {'input_module':input_module}, 
                 "conf=%(conf)s" % {'conf':module['conf']}]
        
        for wire in pipe['wires']:
            if util.pythonise(pipe['wires'][wire]['tgt']['moduleid']) == module_id and pipe['wires'][wire]['tgt']['id'] != '_INPUT' and pipe['wires'][wire]['src']['id'] == '_OUTPUT':
                pargs.append("%(id)s = %(secondary_module)s" % {'id':util.pythonise(pipe['wires'][wire]['tgt']['id']), 'secondary_module':util.pythonise(pipe['wires'][wire]['src']['moduleid'])})
        
        pypipe += """    %(module_id)s = pipe%(module_type)s.pipe_%(module_type)s(%(pargs)s)\n""" % {'module_id':module_id, 'module_type':module['type'], 'pargs':", ".join(pargs)}
        prev_module = module_id
    
    pypipe += """    return _OUTPUT\n"""
    pypipe += ("""\n"""
               """if __name__ == "__main__":\n"""
               """    p = pipe_%s()\n"""
               """    for i in p:\n"""
               """        print i\n""" % (pipe['name'])
              )
        
    return pypipe

def parse_and_write_pipe(json_pipe, pipe_name="anonymous"):
    pipe = _parse_pipe(json_pipe, pipe_name)
    pw = write_pipe(pipe)
    return pw

def parse_and_build_pipe(json_pipe):
    pipe = _parse_pipe(json_pipe, "anonymous")
    pb = build_pipe(pipe)   
    return pb

if __name__ == '__main__':  
    pjson = []
    
    parser = OptionParser()
    parser.add_option("-f", "--file", dest="filename",
                      help="read pipe JSON from FILE", metavar="FILE")    
    parser.add_option("-p", "--pipe", dest="pipeid",
                      help="read pipe JSON from Yahoo", metavar="PIPEID")   
    (options, args) = parser.parse_args()
    
    name = "anonymous"
    if options.pipeid:
        url = ("""http://query.yahooapis.com/v1/public/yql"""
               """?q=select%20PIPE.working%20from%20json%20"""
               """where%20url%3D%22http%3A%2F%2Fpipes.yahoo.com%2Fpipes%2Fpipe.info%3F_out%3Djson%26_id%3D"""
               + options.pipeid + 
               """%22&format=json""")
        pjson = urllib.urlopen(url).readlines()
        pjson = "".join(pjson)
        pipe_def = json.loads(pjson)
        pipe_def = pipe_def['query']['results']['json']['PIPE']['working']
        name = options.pipeid
    elif options.filename:
        for line in fileinput.input(options.filename):
            pjson.append(line)    
        pjson = "".join(pjson)
        pipe_def = json.loads(pjson)
    else:
        for line in fileinput.input():
            pjson.append(line)    
        pjson = "".join(pjson)
        pipe_def = json.loads(pjson)
        
    print parse_and_write_pipe(pipe_def, name)     #TODO print stdout ok?
    
    #test build
    #88ac07fd0ecb8975034ab9ed44e88945
    #a13ff0f791b207d80880bf45a3733794
    #b = parse_and_build_pipe(pipe_def)
    #for i in b:
    #    print i
