"""Translate Yahoo Pipe into Python

   Author: Greg Gaughan
   Idea: Tony Hirst (http://ouseful.wordpress.com/2010/02/25/starting-to-think-about-a-yahoo-pipes-code-generator)
   Inspired by: David Beazely (http://www.dabeaz.com/generators-uk)

   Converts a JSON representation of a pipe into either:
   
     a) a Python script containing a function using generators to build the pipeline
     or
     b) a pipeline of generators which can be executed in-process
     
   (initial proof of concept)
"""

import fileinput

try:
    import json
except ImportError:
    import simplejson as json
   
from topsort import topological_sort

#for build_pipe
from pipefetch import *
from pipefilter import *
from pipeoutput import *

def parse_pipe(json_pipe):
    """Parse pipe JSON into internal structures
    """
    pipe_def = json.loads(json_pipe)
    
    modules = {}
    graph = {}
    for module in pipe_def['modules']:
        modules[module['id']] = module
        graph[module['id']] = []

    #todo assumes 1 to 1 for now
    for wire in pipe_def['wires']:
        graph[wire['src']['moduleid']].append(wire['tgt']['moduleid'])
        
    return modules, graph

def build_pipe(modules, graph):
    """Convert a pipe into an executable Python pipeline
    """
    module_sequence = topological_sort(graph)
    
    steps = {}
    prev_module = None
    for module_id in module_sequence:
        module = modules[module_id]
        
        module_ref = eval("pipe_" + module['type'])
        
        args = []
        if prev_module:
            args.append(steps[prev_module])
        else:
            args.append(None)
        
        kwargs = {'conf':module['conf']}
       
        
        steps[module_id] = module_ref(*args, **kwargs)

        prev_module = module_id
    
    return steps[prev_module]
    
    
def write_pipe(modules, graph):
    """Convert a pipe into Python script
    """
    
    def pythonise(id):
        """Return a Python-friendly id"""
        if id:
            return id.replace("-", "_")
    
    
    pipe = ("""#Pipe generated by pipe2python.py\n"""
            """#todo generate this import list:\n""" #TODO
            """from pipe2py.pipefetch import *\n"""
            """from pipe2py.pipefilter import *\n"""
            """from pipe2py.pipeoutput import *\n"""
            """\n"""
            """def pipe_x():\n"""
            """    #demo\n"""
            """\n"""
           )

    module_sequence = topological_sort(graph)
    
    prev_module = None
    for module_id in module_sequence:
        module = modules[module_id]
        pipe += "    %(module_id)s = pipe_%(module_type)s(%(input_module)s, conf=%(conf)s)\n" % {'module_id':pythonise(module_id), 'module_type':module['type'], 'input_module':pythonise(prev_module) or 'None', 'conf':module['conf']}
        prev_module = module_id
    
    pipe += "    return _OUTPUT\n"
    pipe += ("""\n"""
             """if __name__ == "__main__":\n"""
             """    p = pipe_x()\n"""
             """    for i in p:\n"""
             """        print i\n"""
            )
        
    return pipe

def parse_and_write_pipe(json_pipe):
    modules, graph = parse_pipe(json_pipe)
    pw = write_pipe(modules, graph)
    print pw   #TODO print stdout ok?

def parse_and_build_pipe(json_pipe):
    modules, graph = parse_pipe(json_pipe)
    pb = build_pipe(modules, graph)
    for i in pb:
        print i   #TODO print stdout ok?

if __name__ == '__main__':
    pjson = []
    
    for line in fileinput.input():
        pjson.append(line)
    
    pjson = "".join(pjson)
        
    parse_and_write_pipe(pjson)
    #parse_and_build_pipe(pjson)
