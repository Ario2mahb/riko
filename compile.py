"""Compile/Translate Yahoo Pipe into Python

   (initial proof of concept)

   Takes a JSON representation of a Yahoo pipe and either:
   
     a) translates it into a Python script containing a function (using generators to build the pipeline)
     or
     b) compile it as a pipeline of generators which can be executed in-process
     
   Usage:
     a) python compile.py pipe1.json > pipe1.py
        python pipe1.py
        
     b) import compile
        p = compile.parse_and_build_pipe("JSON pipe representation")
        for i in p:
            print i
     
   Author: Greg Gaughan
   Idea: Tony Hirst (http://ouseful.wordpress.com/2010/02/25/starting-to-think-about-a-yahoo-pipes-code-generator)
   Python generator pipelines inspired by: David Beazely (http://www.dabeaz.com/generators-uk)
"""

import fileinput

try:
    import json
except ImportError:
    import simplejson as json
   
from topsort import topological_sort

#needed for build_pipe
from pipefetch import *
from pipefilter import *
from pipeoutput import *

def _parse_pipe(json_pipe, pipe_name="anonymous"):
    """Parse pipe JSON into internal structures
    
    Keyword arguments:
    json_pipe -- JSON representation of the pipe
    pipe_name -- a name for the pipe (used for linking pipes)
    
    Returns:
    pipe -- an internal representation of a pipe
    """
    pipe_def = json.loads(json_pipe)
    
    pipe = {'name': pipe_name}
    
    pipe['modules'] = {}
    pipe['graph'] = {}
    for module in pipe_def['modules']:
        pipe['modules'][module['id']] = module
        pipe['graph'][module['id']] = []

    #todo assumes 1 to 1 for now
    for wire in pipe_def['wires']:
        pipe['graph'][wire['src']['moduleid']].append(wire['tgt']['moduleid'])
        
    return pipe

def build_pipe(pipe):
    """Convert a pipe into an executable Python pipeline
    """
    module_sequence = topological_sort(pipe['graph'])
    
    steps = {}
    prev_module = None
    for module_id in module_sequence:
        module = pipe['modules'][module_id]
        
        module_ref = eval("pipe_" + module['type'])
        
        args = []
        if prev_module:
            args.append(steps[prev_module])
        else:
            args.append(None)
        
        kwargs = {'conf':module['conf']}
       
        
        steps[module_id] = module_ref(*args, **kwargs)

        prev_module = module_id
    
    return steps[prev_module]
    
    
def write_pipe(pipe):
    """Convert a pipe into Python script
    """
    
    def pythonise(id):
        """Return a Python-friendly id"""
        if id:
            return id.replace("-", "_")
    
    pypipe = ("""#Pipe generated by pipe2py\n"""
              """\n"""
              """#todo generate this import list:\n""" #TODO
              """from pipe2py.pipefetch import *\n"""
              """from pipe2py.pipefilter import *\n"""
              """from pipe2py.pipeoutput import *\n"""
              """\n"""
              """def pipe_%s():\n"""
              """    #demo\n"""
              """\n""" % (pythonise(pipe['name']))
             )

    module_sequence = topological_sort(pipe['graph'])
    
    prev_module = None
    for module_id in module_sequence:
        module = pipe['modules'][module_id]
        pypipe += """    %(module_id)s = pipe_%(module_type)s(%(input_module)s, conf=%(conf)s)\n""" % {'module_id':pythonise(module_id), 'module_type':module['type'], 'input_module':pythonise(prev_module) or 'None', 'conf':module['conf']}
        prev_module = module_id
    
    pypipe += """    return _OUTPUT\n"""
    pypipe += ("""\n"""
               """if __name__ == "__main__":\n"""
               """    p = pipe_%s()\n"""
               """    for i in p:\n"""
               """        print i\n""" % (pythonise(pipe['name']))
              )
        
    return pypipe

def parse_and_write_pipe(json_pipe, pipe_name="anonymous"):
    pipe = _parse_pipe(json_pipe, pipe_name)
    pw = write_pipe(pipe)
    return pw

def parse_and_build_pipe(json_pipe, pipe_name="anonymous"):
    pipe = _parse_pipe(json_pipe, pipe_name)
    pb = build_pipe(pipe)   
    return pb

if __name__ == '__main__':
    pjson = []
    
    for line in fileinput.input():
        pjson.append(line)
    
    pjson = "".join(pjson)
        
    print parse_and_write_pipe(pjson)     #TODO print stdout ok?
