# Pipe {{ pipe_name }} generated by pipe2py

from pipe2py import Context
from pipe2py.modules import pipeforever

{%- for module in modules %}
from pipe2py.modules import {{ module.pymodule_name }}
{%- endfor %}

def {{ pipe_name }}(context, _INPUT, conf=None, **kwargs):
    # todo: insert pipeline description here
    if conf is None:
        conf = {}

    if context.describe_input:
        return {{ inputs }}

    forever = pipeforever.pipe_forever(context, None, conf=None)

{% for module in modules %}
    {% if module.id in embedded_pipes %}
    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_{{ module.id }}(context, _INPUT, conf=None, **kwargs):
        # todo: insert submodule description here
    {% endif %}
    {%- if module.id in embedded_pipes %}        {{ else }}    {% endif -%}
    {{ module.id }} = {{ module.pymodule_name }}.{{ module.pymodule_generator }}(
            {{ module.args }})
    {%- if module.id in embedded_pipes %}
        return {{ module.id }}
    {% endif %}
{% endfor %}
    return {{ last_module }}


if __name__ == "__main__":
    context = Context()
    p = {{ pipe_name }}(context, None)

    for i in p:
        print i
