# Pipe {{ pipe_name }} generated by pipe2py

from pipe2py import Context
from pipe2py.modules.pipeforever import pipe_forever

{%- for module in modules %}
{%- if not module.sub_pipe %}
from pipe2py.modules.{{ module.pymodule_name }} import {{ module.pymodule_generator }}
{%- endif -%}
{%- endfor -%}

{%- for module in modules %}
{%- if module.sub_pipe %}
from pipe2py.pypipelines.{{ module.pymodule_name }} import {{ module.pymodule_generator }}
{%- endif -%}
{%- endfor %}

def {{ pipe_name }}(context=None, _INPUT=None, conf=None, **kwargs):
    # todo: insert pipeline description here
    conf = conf or {}

    if context and context.describe_input:
        return {{ inputs }}

    forever = pipe_forever()

{% for module in modules %}
    {% if module.id in embedded_pipes %}
    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_{{ module.id }}(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
    {% endif %}
    {%- if module.id in embedded_pipes %}        {{ else }}    {% endif -%}
    {{ module.id }} = {{ module.pymodule_generator }}(
            {{ module.args }})
    {%- if module.id in embedded_pipes %}
        return {{ module.id }}
    {% endif %}
{% endfor %}
    return {{ last_module }}


if __name__ == "__main__":
    context = Context()
    pipeline = {{ pipe_name }}(context, None)

    for i in pipeline:
        print i
