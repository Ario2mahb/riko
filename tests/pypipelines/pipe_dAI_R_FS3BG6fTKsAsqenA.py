# Pipe pipe_dAI_R_FS3BG6fTKsAsqenA generated by pipe2py

from pipe2py import Context
from pipe2py.modules.pipeforever import pipe_forever
from pipe2py.modules.pipefetchdata import pipe_fetchdata
from pipe2py.modules.pipestrconcat import pipe_strconcat
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.piperename import pipe_rename
from pipe2py.modules.pipeoutput import pipe_output

def pipe_dAI_R_FS3BG6fTKsAsqenA(context=None, _INPUT=None, conf=None, **kwargs):
    # todo: insert pipeline description here
    conf = conf or {}

    if context.describe_input:
        return []

    forever = pipe_forever()


    sw_286 = pipe_fetchdata(
        context, forever, conf=dict(URL=dict(type='url', value='file://data/capnorth.oes.ca.gov_89509.xml'), path=dict(type='text', value='info')))
    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_298(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_298 = pipe_strconcat(
            context, _INPUT, conf=dict(part=[dict(type='text', subkey='headline'), dict(type='text', value=' ('), dict(type='text', subkey='severity'), dict(type='text', value=')')]))
        return sw_298


    sw_138 = pipe_loop(
        context, sw_286, embed=pipe_sw_298, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='strconcat', id='sw-298', conf=dict(part=[dict(type='text', subkey='headline'), dict(type='text', value=' ('), dict(type='text', subkey='severity'), dict(type='text', value=')')]))), 'assign_to': dict(type='text', value='title')})

    sw_180 = pipe_rename(
        context, sw_138, conf=dict(RULE=[dict(newval=dict(type='text', value='pubDate'), field=dict(type='text', value='expires'), op=dict(type='text', value='rename'))]))

    _OUTPUT = pipe_output(
        context, sw_180, conf=dict())

    return _OUTPUT


if __name__ == "__main__":
    context = Context()
    pipeline = pipe_dAI_R_FS3BG6fTKsAsqenA(context, None)

    for i in pipeline:
        print i
