# Pipe pipe_HrX5bjkv3BGEp9eSy6ky6g generated by pipe2py

from pipe2py import Context
from pipe2py.modules.pipeforever import pipe_forever
from pipe2py.modules.pipefeedautodiscovery import pipe_feedautodiscovery
from pipe2py.modules.pipefetch import pipe_fetch
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipesort import pipe_sort
from pipe2py.modules.pipetruncate import pipe_truncate
from pipe2py.modules.pipeoutput import pipe_output

def pipe_HrX5bjkv3BGEp9eSy6ky6g(context=None, _INPUT=None, conf=None, **kwargs):
    # todo: insert pipeline description here
    conf = conf or {}

    if context.describe_input:
        return []

    forever = pipe_forever()


    sw_149 = pipe_feedautodiscovery(
        context, forever, conf=dict(URL=dict(type='url', value='file://data/edition.cnn.html')))
    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_165(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_165 = pipe_fetch(
            context, _INPUT, conf=dict(URL=dict(type='url', subkey='link')))
        return sw_165


    sw_157 = pipe_loop(
        context, sw_149, embed=pipe_sw_165, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='EMIT'), 'embed': dict(type='module', value=dict(type='fetch', id='sw-165', conf=dict(URL=dict(type='url', subkey='link')))), 'assign_to': dict(type='text', value='loop:fetch')})

    sw_174 = pipe_sort(
        context, sw_157, conf=dict(KEY=[dict(field=dict(type='text', value='pubDate'), dir=dict(type='text', value='ASC'))]))

    sw_191 = pipe_truncate(
        context, sw_174, conf=dict(count=dict(type='number', value='25')))

    _OUTPUT = pipe_output(
        context, sw_191, conf=dict())

    return _OUTPUT


if __name__ == "__main__":
    context = Context()
    pipeline = pipe_HrX5bjkv3BGEp9eSy6ky6g(context, None)

    for i in pipeline:
        print i
