# Pipe pipe_bd9c0c9793ccaec7582b19f45e24f2e6 generated by pipe2py

from pipe2py import Context
from pipe2py.modules.pipeforever import pipe_forever
from pipe2py.modules.pipestrconcat import pipe_strconcat
from pipe2py.modules.pipeurlbuilder import pipe_urlbuilder
from pipe2py.modules.pipestrconcat import pipe_strconcat
from pipe2py.modules.pipedateformat import pipe_dateformat
from pipe2py.modules.pipestrconcat import pipe_strconcat
from pipe2py.modules.pipestrconcat import pipe_strconcat
from pipe2py.modules.pipedatebuilder import pipe_datebuilder
from pipe2py.modules.pipedateformat import pipe_dateformat
from pipe2py.modules.pipedatebuilder import pipe_datebuilder
from pipe2py.modules.pipedatebuilder import pipe_datebuilder
from pipe2py.modules.pipedatebuilder import pipe_datebuilder
from pipe2py.modules.pipestrconcat import pipe_strconcat
from pipe2py.modules.pipeurlbuilder import pipe_urlbuilder
from pipe2py.modules.pipefetchdata import pipe_fetchdata
from pipe2py.modules.pipefilter import pipe_filter
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.piperename import pipe_rename
from pipe2py.modules.piperegex import pipe_regex
from pipe2py.modules.pipefilter import pipe_filter
from pipe2py.modules.pipeunion import pipe_union
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipefilter import pipe_filter
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipeloop import pipe_loop
from pipe2py.modules.pipeunion import pipe_union
from pipe2py.modules.pipeoutput import pipe_output

def pipe_bd9c0c9793ccaec7582b19f45e24f2e6(context=None, _INPUT=None, conf=None, **kwargs):
    # todo: insert pipeline description here
    conf = conf or {}

    if context.describe_input:
        return []

    forever = pipe_forever()

    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_640(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_640 = pipe_strconcat(
            context, _INPUT, conf=dict(part=[dict(type='text', value='Viimeinen hakup&#0228;iv&#0228; '), dict(type='text', subkey='description')]))
        return sw_640

    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_664(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_664 = pipe_urlbuilder(
            context, _INPUT, conf=dict(PATH=dict(type='text', subkey='a.1.href'), BASE=dict(type='text', value=''), PARAM=[]))
        return sw_664

    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_696(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_696 = pipe_strconcat(
            context, _INPUT, conf=dict(part=dict(type='text', subkey='font.content')))
        return sw_696

    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_1014(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_1014 = pipe_dateformat(
            context, _INPUT, conf=dict(format=dict(type='text', value='%d.%m.%Y')))
        return sw_1014


    sw_425 = pipe_strconcat(
        context, forever, conf=dict(part=dict(type='text', value='file://data/users.jyu.fi_~atsoukka_cgi_bin_aarresaari.html')))
    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_1057(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_1057 = pipe_strconcat(
            context, _INPUT, conf=dict(part=[dict(type='text', subkey='a.1.content'), dict(type='text', value=', '), dict(type='text', subkey='content.0'), dict(type='text', value=', '), dict(type='text', subkey='content.1')]))
        return sw_1057


    sw_735 = pipe_datebuilder(
        context, forever, conf=dict(DATE=dict(type='datetime', value='-1 day')))

    sw_743 = pipe_dateformat(
        context, sw_735, conf=dict(format=dict(type='text', value='%m-%d-%Y')))

    sw_754 = pipe_datebuilder(
        context, forever, DATE=sw_743, conf=dict(DATE=dict(terminal='DATE', type='datetime')))
    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_965(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_965 = pipe_datebuilder(
            context, _INPUT, conf=dict(DATE=dict(type='datetime', subkey='deadline')))
        return sw_965

    # We need to wrap submodules (used by loops) so we can pass the
    # input at runtime (as we can to subpipelines)
    def pipe_sw_1048(context=None, _INPUT=None, conf=None, **kwargs):
        # todo: insert submodule description here
        sw_1048 = pipe_datebuilder(
            context, _INPUT, conf=dict(DATE=dict(type='datetime', subkey='published')))
        return sw_1048


    sw_435 = pipe_strconcat(
        context, forever, conf=dict(part=dict(type='text', value='')))

    sw_415 = pipe_urlbuilder(
        context, forever, BASE=sw_425, PARAM_1_value=sw_435, conf=dict(BASE=dict(terminal='BASE', type='text'), PARAM=[dict(value=dict(terminal='PARAM_1_value', type='text'), key=dict(type='text', value='docAddr')), dict(value=dict(type='text', value='on'), key=dict(type='text', value='forceXML'))]))

    sw_459 = pipe_fetchdata(
        context, forever, URL=sw_415, conf=dict(URL=dict(terminal='URL', type='url'), path=dict(type='text', value='body.p')))

    sw_594 = pipe_filter(
        context, sw_459, conf=dict(COMBINE=dict(type='text', value='and'), MODE=dict(type='text', value='permit'), RULE=[dict(field=dict(type='text', value='class'), value=dict(type='text', value='solu'), op=dict(type='text', value='is'))]))

    sw_567 = pipe_loop(
        context, sw_594, embed=pipe_sw_1057, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='strconcat', id='sw-1057', conf=dict(part=[dict(type='text', subkey='a.1.content'), dict(type='text', value=', '), dict(type='text', subkey='content.0'), dict(type='text', value=', '), dict(type='text', subkey='content.1')]))), 'assign_to': dict(type='text', value='title')})

    sw_627 = pipe_loop(
        context, sw_567, embed=pipe_sw_664, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='urlbuilder', id='sw-664', conf=dict(PATH=dict(type='text', subkey='a.1.href'), BASE=dict(type='text', value=''), PARAM=[]))), 'assign_to': dict(type='text', value='link')})

    sw_688 = pipe_loop(
        context, sw_627, embed=pipe_sw_696, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='strconcat', id='sw-696', conf=dict(part=dict(type='text', subkey='font.content')))), 'assign_to': dict(type='text', value='published')})

    sw_895 = pipe_rename(
        context, sw_688, conf=dict(RULE=[dict(newval=dict(type='text', value='deadline'), field=dict(type='text', value='published'), op=dict(type='text', value='copy'))]))

    sw_906 = pipe_regex(
        context, sw_895, conf=dict(RULE=[dict(field=dict(type='text', value='published'), singlelinematch=dict(type='text', value='2'), match=dict(type='text', value=u'Ilmoitus lis\xe4tty:\\s+(\\d+).(\\d+).(\\d+).*'), replace=dict(type='text', value='$2/$1/$3')), dict(field=dict(type='text', value='deadline'), singlelinematch=dict(type='text', value='2'), match=dict(type='text', value=u'.*Viimeinen hakup\xe4iv\xe4:\\s+(\\d+).(\\d+).(\\d+).*'), replace=dict(type='text', value='$2/$1/$3'))]))

    sw_946 = pipe_filter(
        context, sw_906, conf=dict(COMBINE=dict(type='text', value='and'), MODE=dict(type='text', value='permit'), RULE=[dict(field=dict(type='text', value='deadline'), value=dict(type='text', value='\\d+/\\d+/\\d+'), op=dict(type='text', value='matches'))]))

    sw_683 = pipe_union(
        context, sw_946, conf=dict())

    sw_1040 = pipe_loop(
        context, sw_683, embed=pipe_sw_1048, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='datebuilder', id='sw-1048', conf=dict(DATE=dict(type='datetime', subkey='published')))), 'assign_to': dict(type='text', value='y:published')})

    sw_957 = pipe_loop(
        context, sw_1040, embed=pipe_sw_965, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='datebuilder', id='sw-965', conf=dict(DATE=dict(type='datetime', subkey='deadline')))), 'assign_to': dict(type='text', value='deadline')})

    sw_724 = pipe_filter(
        context, sw_957, RULE_1_value=sw_754, conf=dict(COMBINE=dict(type='text', value='and'), MODE=dict(type='text', value='permit'), RULE=[dict(field=dict(type='text', value='deadline.utime'), value=dict(terminal='RULE_1_value', type='text', subkey='utime'), op=dict(type='text', value='greater'))]))

    sw_1006 = pipe_loop(
        context, sw_724, embed=pipe_sw_1014, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value='deadline'), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='dateformat', id='sw-1014', conf=dict(format=dict(type='text', value='%d.%m.%Y')))), 'assign_to': dict(type='text', value='description')})

    sw_632 = pipe_loop(
        context, sw_1006, embed=pipe_sw_640, conf={'assign_part': dict(type='text', value='all'), 'with': dict(type='text', value=''), 'emit_part': dict(type='text', value='all'), 'mode': dict(type='text', value='assign'), 'embed': dict(type='module', value=dict(type='strconcat', id='sw-640', conf=dict(part=[dict(type='text', value='Viimeinen hakup&#0228;iv&#0228; '), dict(type='text', subkey='description')]))), 'assign_to': dict(type='text', value='description')})

    sw_733 = pipe_union(
        context, sw_632, conf=dict())

    _OUTPUT = pipe_output(
        context, sw_733, conf=dict())

    return _OUTPUT


if __name__ == "__main__":
    context = Context()
    pipeline = pipe_bd9c0c9793ccaec7582b19f45e24f2e6(context, None)

    for i in pipeline:
        print i
